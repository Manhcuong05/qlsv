package com.example.demo.controller;

import org.casbin.casdoor.entity.CasdoorUser;
import org.casbin.casdoor.service.CasdoorAuthService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.view.RedirectView;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

/**
 * Controller x·ª≠ l√Ω ƒëƒÉng nh·∫≠p / callback v·ªõi Casdoor.
 * G·ªìm 3 endpoint ch√≠nh:
 *   - /api/login          ‚Üí chuy·ªÉn h∆∞·ªõng sang Casdoor
 *   - /api/auth/callback  ‚Üí Casdoor redirect v·ªÅ v·ªõi m√£ token
 *   - /api/register       ‚Üí tu·ª≥ ch·ªçn, chuy·ªÉn sang trang ƒëƒÉng k√Ω Casdoor
 */
@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class AdminAuthController {

    private final CasdoorAuthService casdoorAuthService;

    @Value("${casdoor.redirect-url}")
    private String redirectUrl;              // V√≠ d·ª•: http://localhost:9089/api/auth/callback

    @Value("${app.frontend-url}")
    private String frontendUrl;              // V√≠ d·ª•: http://localhost:5173

    @Value("${app.oauth.state:qlsv-state}")
    private String oauthState;

    public AdminAuthController(CasdoorAuthService casdoorAuthService) {
        this.casdoorAuthService = casdoorAuthService;
    }

    /**
     * B∆∞·ªõc 1: Ng∆∞·ªùi d√πng g·ªçi /api/login ‚Üí redirect sang Casdoor ƒë·ªÉ ƒëƒÉng nh·∫≠p.
     */
    @GetMapping("/login")
    public RedirectView login() {
        try {
            // SDK Casdoor m·ªõi ch·ªâ nh·∫≠n 1 tham s·ªë redirectUrl
            String signinUrl = casdoorAuthService.getSigninUrl(redirectUrl)
                    + "&state=" + URLEncoder.encode(oauthState, StandardCharsets.UTF_8.toString());

            System.out.println("üîó Redirecting to Casdoor: " + signinUrl);
            return new RedirectView(signinUrl);

        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("‚ùå L·ªói khi t·∫°o URL ƒëƒÉng nh·∫≠p Casdoor: " + e.getMessage());
            return new RedirectView(frontendUrl + "/error.html");
        }
    }

    /**
     * B∆∞·ªõc 2: Casdoor redirect v·ªÅ /api/auth/callback?code=&state=
     * Backend ƒë·ªïi code ‚Üí token (JWT) r·ªìi redirect sang frontend.
     */
    @GetMapping("/auth/callback")
    public RedirectView callback(
            @RequestParam("code") String code,
            @RequestParam(value = "state", required = false) String stateFromCasdoor) {

        try {
            String state = (stateFromCasdoor != null) ? stateFromCasdoor : oauthState;

            // ƒê·ªïi code sang token JWT
            String token = casdoorAuthService.getOAuthToken(code, state);

            // Parse token ƒë·ªÉ l·∫•y th√¥ng tin user (tu·ª≥ ch·ªçn)
            CasdoorUser user = casdoorAuthService.parseJwtToken(token);
            if (user != null) {
                System.out.println("‚úÖ Casdoor login: " + user.getName() + " <" + user.getEmail() + ">");
            }

            // Redirect v·ªÅ FE c√πng token
            String target = frontendUrl.replaceAll("/+$", "")
                    + "/auth-callback.html#token="
                    + URLEncoder.encode(token, StandardCharsets.UTF_8.toString());

            System.out.println("üîÅ Redirecting back to frontend: " + target);
            return new RedirectView(target);

        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("‚ùå L·ªói callback Casdoor: " + e.getMessage());
            String target = frontendUrl.replaceAll("/+$", "") + "/error.html";
            return new RedirectView(target);
        }
    }

    /**
     * (Tu·ª≥ ch·ªçn) ƒê∆∞·ªùng d·∫´n ƒëƒÉng k√Ω t√†i kho·∫£n Casdoor
     */
    @GetMapping("/register")
    public RedirectView register() {
        return new RedirectView("http://localhost:8000/signup/oauth/qlsv-app");
    }
}
